exports.id=928,exports.ids=[928],exports.modules={9392:(t,e,i)=>{i.d(e,{HomeWebviewProvider:()=>HomeWebviewProvider});var n=i(1398),o=i(2125),s=i(4357),a=i(6407),r=i(3302);let h="home",g=new r.Q2(h,"section/collapse"),c=new r.C1(h,"repositories/didChange"),d=new r.C1(h,"integrations/didChange"),u=new r.C1(h,"subscription/didChange"),l=new r.C1(h,"org/settings/didChange"),p=new r.C1(h,"account/didFocus"),C=Object.freeze({dispose:()=>{}});let HomeWebviewProvider=class HomeWebviewProvider{constructor(t,e){this.container=t,this.host=e,this._disposable=n.Disposable.from(this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),n.workspace.isTrusted?C:n.workspace.onDidGrantWorkspaceTrust(this.notifyDidChangeRepositories,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,a.wt)(this.onContextChanged,this),this.container.integrations.onDidChangeConnectionState(this.onChangeConnectionState,this))}_disposable;_pendingFocusAccount=!1;dispose(){this._disposable.dispose()}getTelemetryContext(){return{...this.host.getTelemetryContext()}}onShowing(t,e,...i){let[n]=i;if(n?.focusAccount===!0){if(!t&&this.host.ready&&this.host.visible)return queueMicrotask(()=>void this.host.notify(p,void 0)),[!0,void 0];this._pendingFocusAccount=!0}return[!0,void 0]}onChangeConnectionState(){this.notifyDidChangeOnboardingIntegration()}onRepositoriesChanged(){this.notifyDidChangeRepositories()}registerCommands(){return[(0,s.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this),(0,s.Lb)(`${this.host.id}.account.resync`,()=>this.container.subscription.validate({force:!0}),this)]}onMessageReceived(t){!0===g.is(t)&&this.onCollapseSection(t.params)}includeBootstrap(){return this.getState()}onReloaded(){this.notifyDidChangeRepositories()}onReady(){!0===this._pendingFocusAccount&&(this._pendingFocusAccount=!1,this.host.notify(p,void 0))}onCollapseSection(t){let e=this.container.storage.get("home:sections:collapsed");if(null==e){!0===t.collapsed&&this.container.storage.store("home:sections:collapsed",[t.section]);return}let i=e.indexOf(t.section);if(!0===t.collapsed){-1===i&&this.container.storage.store("home:sections:collapsed",[...e,t.section]);return}-1!==i&&(e.splice(i,1),this.container.storage.store("home:sections:collapsed",e))}getWalkthroughCollapsed(){return this.container.storage.get("home:sections:collapsed")?.includes("walkthrough")??!1}getOrgSettings(){return{drafts:(0,a.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onContextChanged(t){"gitlens:gk:organization:drafts:enabled"===t&&this.notifyDidChangeOrgSettings()}onSubscriptionChanged(t){this.notifyDidChangeSubscription(t.current)}async getState(t){let e=await this.getSubscription(t);return{...this.host.baseWebviewState,repositories:this.getRepositoriesState(),webroot:this.host.getWebRoot(),subscription:e.subscription,avatar:e.avatar,organizationsCount:e.organizationsCount,orgSettings:this.getOrgSettings(),walkthroughCollapsed:this.getWalkthroughCollapsed(),hasAnyIntegrationConnected:this.isAnyIntegrationConnected()}}getRepositoriesState(){return{count:this.container.git.repositoryCount,openCount:this.container.git.openRepositoryCount,hasUnsafe:this.container.git.hasUnsafeRepositories(),trusted:n.workspace.isTrusted}}_hostedIntegrationConnected;isAnyIntegrationConnected(t=!1){return(null==this._hostedIntegrationConnected||!0===t)&&(this._hostedIntegrationConnected=[...this.container.integrations.getConnected("hosting"),...this.container.integrations.getConnected("issues")].length>0),this._hostedIntegrationConnected}async getSubscription(t){let e;return t??=await this.container.subscription.getSubscription(!0),e=t.account?.email?(0,o.ML)(t.account.email,34).toString():`${this.host.getWebRoot()??""}/media/gitlens-logo.webp`,{subscription:t,avatar:e,organizationsCount:null!=t?(await this.container.organizations.getOrganizations()??[]).length:0}}notifyDidChangeRepositories(){this.host.notify(c,this.getRepositoriesState())}notifyDidChangeOnboardingIntegration(){let t=this.isAnyIntegrationConnected(!0);this.host.notify(d,{hasAnyIntegrationConnected:t})}async notifyDidChangeSubscription(t){let e=await this.getSubscription(t);this.host.notify(u,{subscription:e.subscription,avatar:e.avatar,organizationsCount:e.organizationsCount})}notifyDidChangeOrgSettings(){this.host.notify(l,{orgSettings:this.getOrgSettings()})}}}};